import random
import os
import time
import threading
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
from dotenv import load_dotenv
from database import DatabaseManager

load_dotenv()

user_data = {}
user_activity = {}
user_question_count = {}

print('Starting Telegram bot...')

state_storage = StateMemoryStorage()
token_bot = os.getenv('BOT_TOKEN', '')
bot = TeleBot(token_bot, state_storage=state_storage)

db = DatabaseManager()

class Command:
    ADD_WORD = '–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô'
    NEXT = '–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ'
    STATS = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'

class MyStates(StatesGroup):
    waiting_for_english = State()
    waiting_for_russian = State()
    waiting_for_delete_confirmation = State()

def show_hint(*lines):
    return '\n'.join(lines)

def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"

def cleanup_inactive_users():
    import time
    current_time = time.time()
    inactive_threshold = 300
    
    users_to_remove = []
    for user_id, last_activity in user_activity.items():
        if current_time - last_activity > inactive_threshold:
            users_to_remove.append(user_id)
    
    for user_id in users_to_remove:
        if user_id in user_data:
            del user_data[user_id]
        if user_id in user_activity:
            del user_activity[user_id]
        print(f"Cleaned up inactive user: {user_id}")
    
    if users_to_remove:
        print(f"Cleaned up {len(users_to_remove)} inactive users")

@bot.message_handler(commands=['start'])
def send_welcome(message):
    cid = message.chat.id
    user = message.from_user
    
    db.add_user(user.id, user.username, user.first_name, user.last_name)
    
    greeting = f"""–ü—Ä–∏–≤–µ—Ç üëã
–î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ. 

–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:
- –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,
- —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.

–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è"""
    
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    stats_btn = types.KeyboardButton(Command.STATS)
    
    markup.add(next_btn, add_word_btn, delete_word_btn, stats_btn)
    
    bot.send_message(cid, greeting, reply_markup=markup)

def create_cards(message):
    cid = message.chat.id
    
    try:
        word_data = db.get_random_word(cid)
        if not word_data:
            print(f"Warning: No word data returned for user {cid}")
            bot.send_message(cid, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start")
            return
        
        if not word_data.get('english_word') or not word_data.get('translation_word'):
            print(f"Warning: Invalid word data for user {cid}: {word_data}")
            bot.send_message(cid, "–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start")
            return
            
    except Exception as e:
        print(f"Error getting random word: {e}")
        bot.send_message(cid, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start")
        return
    
    other_words_data = db.get_random_words_for_quiz(cid, word_data['english_word'], 3)
    
    if len(other_words_data) < 3:
        print(f"Warning: Only {len(other_words_data)} other words available for user {cid}")
    
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    
    all_options = [word_data['english_word']] + other_words_data
    if len(all_options) < 4:
        print(f"Warning: Not enough options for quiz. User {cid} has only {len(all_options)} options")
        bot.send_message(cid, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–ª–æ–≤.")
        return
    
    random.shuffle(all_options)
    
    option_buttons = [types.KeyboardButton(word) for word in all_options]
    markup.add(*option_buttons)
    
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    stats_btn = types.KeyboardButton(Command.STATS)
    markup.add(next_btn, add_word_btn, delete_word_btn, stats_btn)
    
    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: üá∑üá∫ {word_data['translation_word']}"
    bot.send_message(cid, greeting, reply_markup=markup)
    
    user_id = message.from_user.id
    
    if user_id not in user_question_count:
        user_question_count[user_id] = 0
    user_question_count[user_id] += 1
    
    user_data[user_id] = {
        'target_word': word_data['english_word'],
        'translate_word': word_data['translation_word'],
        'word_type': word_data['word_type'],
        'word_id': word_data['word_id'],
        'other_words': other_words_data
    }
    
    print(f"Saved word data for user {user_id}: {user_data[user_id]}")
    print(f"Target word set to: {word_data['english_word']}")
    print(f"Question count for user {user_id}: {user_question_count[user_id]}")

@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)

@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word_start(message):
    cid = message.chat.id
    bot.set_state(message.from_user.id, MyStates.waiting_for_english, cid)
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:")

@bot.message_handler(state=MyStates.waiting_for_english)
def add_word_english(message):
    cid = message.chat.id
    english_word = message.text.strip()
    
    if not english_word or len(english_word) < 2:
        bot.send_message(cid, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).")
        return
    
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id]['new_english_word'] = english_word
    
    bot.set_state(message.from_user.id, MyStates.waiting_for_russian, cid)
    bot.send_message(cid, f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ '{english_word}':")

@bot.message_handler(state=MyStates.waiting_for_russian)
def add_word_russian(message):
    cid = message.chat.id
    russian_word = message.text.strip()
    
    if not russian_word or len(russian_word) < 2:
        bot.send_message(cid, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).")
        return
    
    user_id = message.from_user.id
    english_word = user_data.get(user_id, {}).get('new_english_word', '')
    
    if db.add_user_word(cid, english_word, russian_word):
        words_count = db.get_user_words_count(cid)
        bot.send_message(cid, f"–°–ª–æ–≤–æ '{english_word}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {words_count} –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.")
    else:
        bot.send_message(cid, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    bot.delete_state(message.from_user.id, cid)
    
    create_cards(message)

@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word_start(message):
    cid = message.chat.id
    
    words_count = db.get_user_words_count(cid)
    
    if words_count == 0:
        bot.send_message(cid, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    user_words = db.get_user_words(cid)
    
    if not user_words:
        bot.send_message(cid, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    for english_word, translation_word in user_words:
        delete_btn = types.InlineKeyboardButton(
            f"üóëÔ∏è {english_word} -> {translation_word}", 
            callback_data=f"delete_{english_word}"
        )
        markup.add(delete_btn)
    
    bot.send_message(cid, f"–í—ã–±–µ—Ä–∏ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—É —Ç–µ–±—è {words_count} –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤):", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def delete_word_confirmation(call):
    cid = call.message.chat.id
    english_word = call.data.replace('delete_', '')
    
    if db.delete_user_word(cid, english_word):
        remaining_count = db.get_user_words_count(cid)
        bot.edit_message_text(
            f"‚úÖ –°–ª–æ–≤–æ '{english_word}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!\n\n–û—Å—Ç–∞–ª–æ—Å—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: {remaining_count}",
            cid, 
            call.message.message_id
        )
        
        if remaining_count > 0:
            markup = types.InlineKeyboardMarkup()
            continue_btn = types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ", callback_data="continue_learning")
            markup.add(continue_btn)
            bot.send_message(cid, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=markup)
        else:
            create_cards(call.message)
    else:
        bot.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ '{english_word}'.",
            cid, 
            call.message.message_id
        )

@bot.callback_query_handler(func=lambda call: call.data == "continue_learning")
def continue_learning_handler(call):
    cid = call.message.chat.id
    bot.edit_message_text("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–∑—É—á–µ–Ω–∏–µ!", cid, call.message.message_id)
    create_cards(call.message)

@bot.message_handler(func=lambda message: message.text == Command.STATS)
def show_stats(message):
    cid = message.chat.id
    
    personal_words = db.get_user_words_count(cid)
    db_stats = db.get_database_stats()
    
    if db_stats:
        stats_text = f"""–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: {personal_words}
–û–±—â–∏—Ö —Å–ª–æ–≤: {db_stats['common_words']}
–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db_stats['users']}
–í—Å–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: {db_stats['user_words']}

–°–æ–≤–µ—Ç: –î–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞!"""
    else:
        stats_text = f"""–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: {personal_words}
–û–±—â–∏—Ö —Å–ª–æ–≤: 15 (–±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä)

–°–æ–≤–µ—Ç: –î–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞!"""
    
    bot.send_message(cid, stats_text)

@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    cid = message.chat.id
    user_id = message.from_user.id
    
    user_activity[user_id] = time.time()
    
    if text in [Command.NEXT, Command.ADD_WORD, Command.DELETE_WORD, Command.STATS]:
        return
    
    data = user_data.get(user_id, {})
    print(f"User {user_id} data: {data}")
    print(f"Text received: '{text}'")
    
    if 'target_word' not in data:
        print(f"No target_word found for user {user_id}, creating new cards")
        try:
            bot.send_message(cid, "–°–æ–∑–¥–∞—é –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è...")
            create_cards(message)
        except Exception as e:
            print(f"Error creating cards: {e}")
            bot.send_message(cid, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start")
        return
    
    if not text or len(text.strip()) < 1:
        bot.send_message(cid, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç!")
        return
    
    target_word = data['target_word']
    translate_word = data['translate_word']
    word_type = data.get('word_type', 'common')
    word_id = data.get('word_id')
    
    print(f"Checking answer: '{text}' against target: '{target_word}'")
    
    valid_options = [target_word] + data.get('other_words', [])
    if text not in valid_options:
        bot.send_message(cid, f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞!")
        return
    
    if text == target_word:
        bot.send_message(cid, f"–û—Ç–ª–∏—á–Ω–æ! ‚ù§Ô∏è {target_word} -> {translate_word}")
        
        if word_id and word_type:
            db.update_learning_stats(cid, word_id, word_type, True)
        
        user_data[user_id] = {}
        
        time.sleep(1)
        create_cards(message)
    
    else:
        bot.send_message(cid, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –¢–≤–æ–π –æ—Ç–≤–µ—Ç: '{text}'\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{target_word}' -> '{translate_word}'\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! üí™")
        
        if word_id and word_type:
            db.update_learning_stats(cid, word_id, word_type, False)
        
        print(f"Wrong answer for user {user_id} - keeping word data: {data}")
        
        bot.send_message(cid, f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: üá∑üá∫ {translate_word}")
        
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        all_options = [target_word] + data.get('other_words', [])
        random.shuffle(all_options)
        option_buttons = [types.KeyboardButton(word) for word in all_options]
        markup.add(*option_buttons)
        
        next_btn = types.KeyboardButton(Command.NEXT)
        add_word_btn = types.KeyboardButton(Command.ADD_WORD)
        delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
        stats_btn = types.KeyboardButton(Command.STATS)
        markup.add(next_btn, add_word_btn, delete_word_btn, stats_btn)
        
        bot.send_message(cid, "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:", reply_markup=markup)

bot.add_custom_filter(custom_filters.StateFilter(bot))

if __name__ == '__main__':
    try:
        print("Bot started. Press Ctrl+C to stop.")
        
        def periodic_cleanup():
            while True:
                try:
                    cleanup_inactive_users()
                    time.sleep(60)
                except Exception as e:
                    print(f"Cleanup error: {e}")
                    time.sleep(60)
        
        cleanup_thread = threading.Thread(target=periodic_cleanup, daemon=True)
        cleanup_thread.start()
        
        bot.infinity_polling(skip_pending=True)
    except KeyboardInterrupt:
        print("\nBot stopped.")
        db.close()
    except Exception as e:
        print(f"Error: {e}")
        db.close() 